#pragma once
#include <iostream>
#include <ostream>
#define _CRTDBG_MAP_ALLOC

enum what {
	up,
	down
};
class Sequence {
public:
	Sequence(); //пустой конструктор дл€ инициализации экземпл€ров и массивов экземпл€ров класса по умолчанию (делает длину = 0)
	Sequence(int length, const int* arr); //создание экземпл€ров класса с инициализацией размером и значени€ми элементов после-довательности;
	Sequence(int el); //cоздание экземпл€ров класса с инициализацией единственным элементом последователь-ности;
	
	int find_el_count(int num) const; //определение частоты по€влени€ некоторого элемента в последовательности
	int uniq() const;//определение количества групп в последовательности (то есть, сколько разных элементов включено в последовательность);
	void set_arr(int index, int num);  //добавить одлин элемент по индексу
	void see_seq(std::ostream& out) const; //увидеть последовательность
	Sequence& unite(const Sequence& seq) const; //объединение двух последовательностей в одну(с помощью перегруженного оператора сложени€ + ) в результате формируетс€ новый вектор с сохранением исходных
	int get_el(int index) const;//получить элемент последовательности по его индексу
	int get_length() const;//получить длину массива класса
	void add_el(int num); //добавить один элемент в последовательность
	void see_seq_up_or_down(int* array, int len, what what) const; //выделение первой упор€доченной по убыванию(what=1) или возрастанию(what=2) последовательности длиной не менее трЄх элементов;

	
	void input(std::istream& s);
	
	friend std::ostream& operator << (std::ostream& s, const Sequence& seq);
	friend std::istream& operator >> (std::istream& s, Sequence& seq);
	
	friend Sequence& operator + (const Sequence& seq1, const Sequence& seq2);
	Sequence& operator+=(const Sequence& seq1);
	Sequence& operator +=(const int i);
	int operator () (int num);
private:
	int size = 100;
	int length;
	int arr[100];
	
};